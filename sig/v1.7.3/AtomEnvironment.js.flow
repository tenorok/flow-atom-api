// -*- mode: javascript; -*- // @flow

import type { Clipboard } from "./Clipboard.js.flow";
import type { CommandRegistry } from "./CommandRegistry.js.flow";
import type { Config } from "./Config.js.flow";
import type { ContextMenuManager } from "./ContextMenuManager.js.flow";
import type { DeserializerManager } from "./DeserializerManager.js.flow";
import type { Disposable } from "./Disposable.js.flow";
import type { GrammarRegistry } from "./GrammarRegistry.js.flow";
import type { KeymapManager } from "./KeymapManager.js.flow";
import type { MenuManager } from "./MenuManager.js.flow";
import type { NotificationManager } from "./NotificationManager.js.flow";
import type { PackageManager } from "./PackageManager.js.flow";
import type { Project } from "./Project.js.flow";
import type { StyleManager } from "./StyleManager.js.flow";
import type { TextEditorRegistry } from "./TextEditorRegistry.js.flow";
import type { ThemeManager } from "./ThemeManager.js.flow";
import type { TooltipManager } from "./TooltipManager.js.flow";
import type { ViewRegistry } from "./ViewRegistry.js.flow";
import type { Window } from "./Window.js.flow";
import type { Workspace } from "./Workspace.js.flow";

declare class AtomEnvironment {
  clipboard: Clipboard;
  commands: CommandRegistry;
  config: Config;
  contextMenu: ContextMenuManager;
  deserializers: DeserializerManager;
  grammars: GrammarRegistry;
  keymaps: KeymapManager;
  menu: MenuManager;
  notifications: NotificationManager;
  packages: PackageManager;
  project: Project;
  styles: StyleManager;
  textEditors: TextEditorRegistry;
  themes: ThemeManager;
  tooltips: TooltipManager;
  views: ViewRegistry;
  workspace: Workspace;

  beep(): void;

  center(): void;

  close(): void;

  confirm(
    options: {
      message: string,
      detailedMessage?: string,
      buttons?: string[] | { [buttonName: string]: () => void },
    }): ?number;

  focus(): void;
  // FIXME: docs unclear on arg type

  executeJavaScriptInDevTools(code: string): void;

  getCurrentWindow(): Window;

  getLoadSettings(): Object;

  getPosition(): { x: number, y: number };

  getSize(): { width: number, height: number };

  getVersion(): string;

  getWindowLoadTime(): number;

  hide(): void;

  inDevMode(): boolean;

  inSafeMode(): boolean;

  inSpecMode(): boolean;

  isFullScreen(): boolean;

  isMaximized(): boolean;

  isReleasedVersion(): boolean;

  onDidBeep(callback: () => void): Disposable;

  onDidThrowError(
    callback:
      (event: {
        originalError: Object,
        message: string,
        url: string,
        line: number,
        column: number,
      })
      => void
  ): Disposable;

  open(
    props: {
      pathsToOpen: string[],
      newWindow: boolean,
      devMode: boolean,
      safeMode: boolean,
    }
  ): void;

  onWillThrowError(
    callback:
      (event: {
        originalError: Object,
        message: string,
        url: string,
        line: number,
        column: number,
        preventDefault(): void,
      })
      => void
  ): Disposable;

  pickFolder(callback: (paths: ?(string[])) => void): void;

  reload(): void;

  setFullScreen(): void;

  setPosition(x: number, y: number): void;

  setSize(width: number, height: number): void;

  show(): void;

  toggleFullScreen(): void;

  openDevTools(): Promise<void>;

  toggleDevTools(): Promise<void>;
}

export type { AtomEnvironment };
