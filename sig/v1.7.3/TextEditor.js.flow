// -*- mode: javascript; -*- // @flow
/* eslint-disable no-undef */

// FIXME: check optional fields

declare class TextEditor {
  abortTransaction(): void;
  addCursorAtBufferPosition(bufferPosition: PointLike): Cursor;
  addCursorAtScreenPosition(screenPosition: PointLike): Cursor;
  addGutter(options: {
    name: string,
    priority?: number,
    visible?: boolean
  }): Gutter;
  addMarkerLayer(options: {
    maintainHistory?: boolean,
  }): TextEditorMarkerLayer;
  addSelectionForBufferRange(
    bufferRange: RangeLike,
    options?: {
      reversed: boolean,
    }
  ): Selection;
  addSelectionForScreenRange(
    screenRange: RangeLike,
    options?: {
      reversed: boolean,
    }
  ): Selection;
  autoIndentSelectedRows(): void;
  backspace(): void;
  backwardsScanInBufferRange(
    regex: RegExp,
    range: RangeLike,
    iterator: any,
  ): void;
  bufferPositionForScreenPosition(
    bufferPosition: PointLike, // FIXME
    options?: {
      screenLine: boolean,
      wrapAtSoftNewlines: boolean,
      wrapBeyondNewlines: boolean,
    },
  ): Point;
  bufferRangeForScopeAtCursor(scopeSelector: string): Range;
  bufferRangeForScreenRange(screenRange: RangeLike): Range;
  clipBufferPosition(bufferPosition: PointLike): Point;
  clipBufferRange(range: RangeLike): Range;
  clipScreenPosition(
    screenPosition: PointLike,
    options?: {
      screenLine: boolean,
      wrapAtSoftNewlines: boolean,
      wrapBeyondNewlines: boolean,
    },
  ): Point;
  clipScreenRange(
    range: RangeLike,
    options?: {
      screenLine: boolean,
      wrapAtSoftNewlines: boolean,
      wrapBeyondNewlines: boolean,
    },
  ): Range;
  copySelectedText(): void;
  createCheckpoint(): number;
  cutSelectedText(): void;
  cutToEndOfBufferLine(): void;
  cutToEndOfLine(): void;
  decorateMarker(
    marker: TextEditorMarker,
    decorationParams: DecorationProperties,
  ): Decoration;
  decorateMarkerLayer(
    markerLayer: TextEditorMarkerLayer,
    decorationParams: DecorationProperties,
  ): LayerDecoration;
  delete(): void;
  deleteLine(): void;
  deleteToBeginningOfLine(): void;
  deleteToBeginningOfSubword(): void;
  deleteToBeginningOfWord(): void;
  deleteToEndOfLine(): void;
  deleteToEndOfSubword(): void;
  deleteToEndOfWord(): void;
  deleteToNextWordBoundary(): void;
  deleteToPreviousWordBoundary(): void;
  findMarkers(properties: {
    startBufferRow: number,
    endBufferRow: number,
    containsBufferRange: RangeLike,
    containsBufferPosition: PointLike,
  }): TextEditorMarker[];
  foldAll(): void;
  foldAllAtIndentLevel(level: number): void;
  foldBufferRow(bufferRow: number): void;
  foldCurrentRow(): void;
  foldSelectedLines(): void;
  getBuffer(): TextBuffer;
  getCurrentParagraphBufferRange(): Range;
  getCursorAtScreenPosition(position: PointLike): void | Cursor;
  getCursorBufferPosition(): Point;
  getCursorBufferPositions(): Point[];
  getCursors(): Cursor[]; // FIXME
  getCursorScreenPosition(): Point;
  getCursorScreenPositions(): Point[];
  getCursorsOrderedByBufferPosition(): Cursor[];
  getDecorations(propertyFilter?: any): any;
  getDefaultMarkerLayer(): TextEditorMarkerLayer;
  getEncoding(): any;
  getGrammar(): any;
  getGutters(): any;
  getHighlightDecorations(propertyFilter?: any): any;
  getLastBufferRow(): any;
  getLastCursor(): any;
  getLastScreenRow(): any;
  getLastSelection(): any;
  getLineCount(): any;
  getLineDecorations(propertyFilter?: any): any;
  getLineNumberDecorations(propertyFilter?: any): any;
  getLongTitle(): any;
  getMarker(id: any): any;
  getMarkerCount(): any;
  getMarkerLayer(id: any): any;
  getMarkers(): any;
  getOverlayDecorations(propertyFilter?: any): any;
  getPath(): any;
  getPlaceholderText(): any;
  getRootScopeDescriptor(): any;
  getScreenLineCount(): any;
  getSelectedBufferRange(): any;
  getSelectedBufferRanges(): any;
  getSelectedScreenRange(): any;
  getSelectedScreenRanges(): any;
  getSelectedText(): any;
  getSelections(): any;
  getSelectionsOrderedByBufferPosition(): any;
  getSoftTabs(): any;
  getSoftWrapColumn(): any;
  getTabLength(): any;
  getTabText(): any;
  getText(): any;
  getTextInBufferRange(range: any): any;
  getTitle(): any;
  getWordUnderCursor(options?: any): any;
  groupChangesSinceCheckpoint(): any;
  gutterWithName(): any;
  hasMultipleCursors(): any;
  indentationForBufferRow(): any;
  indentLevelForLine(): any;
  indentSelectedRows(): any;
  insertNewline(): any;
  insertNewlineAbove(): any;
  insertNewlineBelow(): any;
  insertText(text: any, options?: any): any;
  isBufferRowCommented(): any;
  isEmpty(): any;
  isFoldableAtBufferRow(bufferRow: any): any;
  isFoldableAtScreenRow(bufferRow: any): any;
  isFoldedAtBufferRow(bufferRow: any): any;
  isFoldedAtCursorRow(): any;
  isFoldedAtScreenRow(screenRow: any): any;
  isModified(): any;
  isSoftWrapped(): any;
  lineTextForBufferRow(bufferRow: any): any;
  lineTextForScreenRow(screenRow: any): any;
  lowerCase(): any;
  markBufferPosition(position: any, options?: any): any;
  markBufferRange(range: any, properties: any): any;
  markScreenPosition(position: any, options?: any): any;
  markScreenRange(range: any, properties: any): any;
  moveBeginningOfPreviousParagraph(): any;
  moveDown(lineCount?: any): any;
  moveLeft(columnCount?: any): any;
  moveRight(columnCount?: any): any;
  moveToBeginningOfLine(): any;
  moveToBeginningOfNextParagraph(): any;
  moveToBeginningOfNextWord(): any;
  moveToBeginningOfScreenLine(): any;
  moveToBeginningOfWord(): any;
  moveToBottom(): any;
  moveToEndOfLine(): any;
  moveToEndOfScreenLine(): any;
  moveToEndOfWord(): any;
  moveToFirstCharacterOfLine(): any;
  moveToNextSubwordBoundary(): any;
  moveToNextWordBoundary(): any;
  moveToPreviousSubwordBoundary(): any;
  movetoPreviousWordBoundary(): any;
  moveToTop(): any;
  moveUp(lineCount?: any): any;
  mutateSelectedText(fn: any): any;
  observeCursors(callback: any): any;
  observeDecorations(callback: any): any;
  observeGrammar(callback: any): any;
  observeGutters(callback: any): any;
  observeSelections(callback: any): any;
  onDidAddCursor(callback: any): any;
  onDidAddDecoration(callback: any): any;
  onDidAddGutter(callback: any): any;
  onDidAddSelection(callback: any): any;
  onDidChange(callback: any): any;
  onDidChangeCursorPosition(callback: any): any;
  onDidChangeEncoding(callback: any): any;
  onDidChangeGrammar(callback: any): any;
  onDidChangeModified(callback: any): any;
  onDidChangePath(callback: any): any;
  onDidChangePlaceholderText(callback: any): any;
  onDidChangeSelectionRange(callback: any): any;
  onDidChangeSoftWrapped(callback: any): any;
  onDidChangeTitle(callback: any): any;
  onDidConflict(callback: any): any;
  onDidDestroy(callback: any): any;
  onDidInsertText(callback: any): any;
  onDidRemoveCursor(callback: any): any;
  onDidRemoveDecoration(callback: any): any;
  onDidRemoveGutter(callback: any): any;
  onDidRemoveSelection(callback: any): any;
  onDidSave(callback: any): any;
  onDidStopChanging(callback: any): any;
  onWillInsertText(callback: any): any;
  outdentSelectedRows(): any;
  pasteText(options?: any): any;
  redo(): any;
  revertToCheckpoint(): any;
  save(): any;
  saveAs(filePath: any): any;
  scan(regex: any, iterator: any): any;
  scanInBufferRange(regex: any, range: any, iterator: any): any;
  scopeDescriptorForBufferPosition(bufferPosition: any): any;
  screenPositionForBufferPosition(bufferPosition: any, options?: any): any;
  screenRangeForBufferRange(bufferRange: any): any;
  scrollToBufferPosition(bufferPosition: any, options?: any): any;
  scrollToCursorPosition(options?: any): any;
  scrollToScreenPosition(screenPosition: any, options?: any): any;
  selectAll(): any;
  selectDown(rowCount?: any): any;
  selectionIntersectsBufferRange(bufferRange: any): any;
  selectLeft(columnCount?: any): any;
  selectLinesContainingCursors(): any;
  selectMarker(marker: any): any;
  selectRight(columnCount?: any): any;
  selectToBeginningOfLine(): any;
  selectToBeginningOfNextParagraph(): any;
  selectToBeginningOfNextWord(): any;
  selectToBeginningOfPreviousParagraph(): any;
  selectToBeginningOfWord(): any;
  selectToBottom(): any;
  selectToBufferPosition(position: any): any;
  selectToEndOfLine(): any;
  selectToEndOfWord(): any;
  selectToFirstCharacterOfLine(): any;
  selectToNextSubwordBoundary(): any;
  selectToNextWordBoundary(): any;
  selectToPreviousSubwordBoundary(): any;
  selectToPreviousWordBoundary(): any;
  selectToScreenPosition(position: any): any;
  selectToTop(): any;
  selectUp(rowCount?: any): any;
  selectWordsContainingCursors(): any;
  setCursorBufferPosition(position: any, options?: any): any;
  setCursorScreenPosition(position: any, options?: any): any;
  setCursorScreenPositions(): any;
  setEncoding(encoding: string): void; // FIXME: could refine encoding
  setGrammar(grammar: Grammar): void;
  setIndentationForBufferRow(
    bufferRow: number,
    newLevel: number,
    options?: {
      preserveLeadingWhitespace?: boolean,
    },
  ): void;
  setPlaceholderText(placeholderText: string): void;
  setSelectedBufferRange(
    bufferRange: RangeLike,
    options?: {
      reversed?: boolean,
      preserveFolds?: boolean,
    },
  ): void;
  setSelectedBufferRanges(
    bufferRanges: RangeLike[],
    options?: { // FIXME: are these optional?
      reversed?: boolean,
      preserveFolds?: boolean,
    },
  ): void;
  setSelectedScreenRange(
    screenRange: RangeLike,
    options?: {
      reversed?: boolean,
    },
  ): void;
  setSelectedScreenRanges(
    screenRanges: RangeLike[],
    options?: {
      reversed?: boolean,
    },
  ): void;
  setSoftTabs(softTabs: boolean): void;
  setSoftWrapped(softWrapped: boolean): boolean;
  setTabLength(tabLength: ?number): void;
  setText(text: string): void;
  setTextInBufferRange(
    range: RangeLike,
    text: String,
    options?: {
      normalizeLineEndings?: boolean,
      undo?: string,
    },
  ): Range;
  toggleFoldAtBufferRow(): void;
  toggleLineCommentsInSelection(): void;
  toggleSoftTabs(): void;
  toggleSoftWrapped(): boolean;
  transact(groupInterval?: number, fn: () => void): void;
  transpose(): void;
  undo(): void;
  unfoldAll(): void;
  unfoldBufferRow(bufferRow: number): void;
  unfoldCurrentRow(): void;
  upperCase(): void;
  usesSoftTabs(): boolean;
}
