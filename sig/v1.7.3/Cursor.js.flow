// -*- mode: javascript; -*- // @flow
/* eslint-disable no-undef */

declare type Position =
  | [number, number]

declare class Cursor {
  clearAutoscroll(): void;
  clearSelection(): void;
  compare(otherCursor: Cursor): PointComparison; // FIXME
  getBeginningOfCurrentWordBufferPosition( // FIXME
    options?: {
      allowPrevious: boolean,
      includeNonWordCharacters: boolean,
      wordRegex: RegExp,
    },
  ): Range;
  getBeginningOfNextWordBufferPosition(
    options:? {
      wordRegex: RegExp,
    },
  ): Range; // FIXME
  getBufferColumn(): number;
  getBufferPosition(): Position;
  getBufferRow(): number;
  getCurrentBufferLine(): string; // FIXME
  getCurrentLineBufferRange(
    options?: {
      includeNewline: boolean,
    },
  ): Range; // FIXME
  getCurrentParagraphBufferRange(): Range;
  getCurrentWordBufferRange(
    options?: {
      wordRegex: RegExp,
    },
  ): Range; // FIXME
  getCurrentWordPrefix(): string; // FIXME
  getEndOfCurrentWordBufferPosition(
    options?: {
      wordRegex: RegExp,
      includeNonWordCharacters: boolean,
    },
  ): Range; // FIXME
  getIndentLevel(): number; // FIXME
  getMarker(): TextEditorMarker;
  getNextWordBoundaryBufferPosition(
    options?: {
      wordRegex: RegExp,
    },
  ): Position; // FIXME
  getPreviousWordBoundaryBufferPosition(
    options?: {
      wordRegex: RegExp,
    },
  ): Position; // FIXME
  getScopeDescriptor(): ScopeDescriptor;
  getScreenColumn(): number;
  getScreenPosition(): Point;
  getScreenRow(): number;
  hasPrecedingCharactersOnLine(): boolean; // FIXME
  isAtBeginningOfLine(): boolean; // FIXME
  isAtEndOfLine(): boolean;
  isBetweenWordAndNonWord(): boolean;
  isInsideWord(options?: { wordRegex: RegExp }): boolean;
  isLastCursor(): boolean;
  isSurroundedByWhitespace(): boolean;
  isVisible(): boolean; // FIXME
  onDidChangePosition(
    callback:
      (event: {
        oldBufferPosition: Point,
        oldScreenPosition: Point,
        newBufferPosition: Point,
        newScreenPosition: Point,
        textChanged: boolean,
        cursor: Cursor,
      }) => void,
  ): Disposable; // FIXME
  onDidChangeVisibility(callback: (visibility: boolean) => void): Disposable;
  onDidDestroy(callback: () => void): Disposable;
  moveDown(
    rowCount?: number,
    options?: { moveToEndOfSelection: boolean }
  ): void;
  moveLeft(
    columnCount?: number,
    options?: { moveToEndOfSelection: boolean }
  ): void;
  moveRight(
    columnCount?: number,
    options?: { moveToEndOfSelection: boolean }
  ): void;
  moveToBeginningOfScreenLine(): void;
  moveToBeginningOfLine(): void;
  moveToBottom(): void;
  moveToTop(): void;
  moveUp(
    rowCount?: number,
    options?: { moveToEndOfSelection: boolean }
  ): void;
  moveToBeginningOfNextParagraph(): void;
  moveToBeginningOfNextWord(): void;
  moveToBeginningOfPreviousParagraph(): void;
  moveToBeginningOfWord(): void;
  moveToEndOfLine(): void;
  moveToEndOfScreenLine(): void;
  moveToEndOfWord(): void;
  moveToFirstCharacterOfLine(): void;
  moveToNextWordBoundary(): void;
  moveToNextSubwordBoundary(): void;
  moveToPreviousWordBoundary(): void;
  moveToPreviousSubwordBoundary(): void;
  skipLeadingWhitespace(): void;
  setBufferPosition(
    bufferPosition: Position,
    options: { autoscroll: boolean }
  ): void;
  setScreenPosition(
    screenPosition: Position,
    options?: { autoscroll: boolean }
  ): void;
  setVisible(): void;
  subwordRegExp(
    options?: { backwards: boolean }
  ): RegExp;
  wordRegExp(
    options?: { includeNonWordCharacters: boolean }
  ): RegExp;
}
