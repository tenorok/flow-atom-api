// -*- mode: javascript; -*- // @flow
/* eslint-disable no-undef */

declare class TextBuffer {
  constructor(params: any): any;
  onWillChange(callback: any): any;
  onDidChange(callback: any): any;
  onDidStopChanging(callback: any): any;
  onDidConflict(callback: any): any;
  onDidChangeModified(callback: any): any;
  onDidUpdateMarkers(callback: any): any;
  onDidCreateMarker(callback: any): any;
  onDidChangePath(callback: any): any;
  onDidChangeEncoding(callback: any): any;
  onWillSave(callback: any): any;
  onDidSave(callback: any): any;
  onDidDelete(callback: any): any;
  onWillReload(callback: any): any;
  onDidReload(callback: any): any;
  onDidDestroy(callback: any): any;
  onWillThrowWatchError(callback: any): any;
  getStoppedChangingDelay(): any;
  isModified(): any;
  isInConflict(): any;
  getPath(): any;
  setPath(filePath: any): any;
  setEncoding(encoding: any): any;
  getEncoding(): any;
  getUri(): any;
  isEmpty(): any;
  getText(): any;
  getTextInRange(range: any): any;
  getLines(): any;
  getLastLine(): any;
  lineForRow(row: any): any;
  lineEndingForRow(row: any): any;
  lineLengthForRow(row: any): any;
  isRowBlank(row: any): any;
  previousNonBlankRow(startRow: any): any;
  nextNonBlankRow(startRow: any): any;
  setText(text: any): any;
  setTextViaDiff(text: any): any;
  setTextInRange(range: any, text: any, options?: any): any;
  insert(position: any, text: any, options?: any): any;
  append(text: any, options?: any): any;
  delete(range: any): any;
  deleteRow(row: any): any;
  deleteRows(startRow: any, endRow: any): any;
  addMarkerLayer(options: any): any;
  getMarkerLayer(id: any): any;
  getDefaultMarkerLayer(): any;
  markRange(range: any, properties: any): any;
  markPosition(position: any, properties: any): any;
  getMarkers(): any;
  getMarker(id: any): any;
  findMarkers(params: any): any;
  getMarkerCount(): any;
  undo(): any;
  redo(): any;
  transact(groupingInterval?: any, fn: any): any;
  clearUndoStack(): any;
  createCheckpoint(): any;
  revertToCheckpoint(): any;
  groupChangesSinceCheckpoint(): any;
  getChangesSinceCheckpoint(): any;
  scan(regex: any, iterator: any): any;
  backwardsScan(regex: any, iterator: any): any;
  scanInRange(regex: any, range: any, iterator: any): any;
  backwardsScanInRange(regex: any, range: any, iterator: any): any;
  replace(regex: any, replacementText: any): any;
  getRange(): any;
  getLineCount(): any;
  getLastRow(): any;
  getFirstPosition(): any;
  getEndPosition(): any;
  getMaxCharacterIndex(): any;
  rangeForRow(row: any, includeNewLine: any): any;
  characterIndexForPosition(position: any): any;
  positionForCharacterIndex(offset: any): any;
  clipRange(range: any): any;
  clipPosition(position: any): any;
  save(): any;
  saveAs(filePath: any): any;
  reload(): any;
}
